/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common'

export interface VCowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'VESTING_PERIOD_IN_SECONDS'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'claim'
      | 'claimMany'
      | 'communityFundsTarget'
      | 'cowToken'
      | 'cumulativeVestedBalance'
      | 'decimals'
      | 'deploymentTimestamp'
      | 'fullAllocation'
      | 'getStorageAt'
      | 'gnoPrice'
      | 'gnoToken'
      | 'instantlySwappableBalance'
      | 'investorFundsTarget'
      | 'isCancelable'
      | 'isClaimed'
      | 'merkleRoot'
      | 'name'
      | 'nativeTokenPrice'
      | 'newlyVestedBalance'
      | 'simulateDelegatecall'
      | 'simulateDelegatecallInternal'
      | 'stopClaim'
      | 'swap'
      | 'swapAll'
      | 'swappableBalanceOf'
      | 'symbol'
      | 'teamController'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'usdcPrice'
      | 'usdcToken'
      | 'vestedAllocation'
      | 'vestingStart'
      | 'withdrawEth'
      | 'wrappedNativeToken',
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic: 'Approval' | 'Claimed' | 'Transfer' | 'Vested' | 'VestingAdded' | 'VestingStopped',
  ): EventFragment

  encodeFunctionData(functionFragment: 'VESTING_PERIOD_IN_SECONDS', values?: undefined): string
  encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string
  encodeFunctionData(
    functionFragment: 'claim',
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike[]],
  ): string
  encodeFunctionData(
    functionFragment: 'claimMany',
    values: [
      BigNumberish[],
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[][],
      BigNumberish[],
    ],
  ): string
  encodeFunctionData(functionFragment: 'communityFundsTarget', values?: undefined): string
  encodeFunctionData(functionFragment: 'cowToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'cumulativeVestedBalance', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'deploymentTimestamp', values?: undefined): string
  encodeFunctionData(functionFragment: 'fullAllocation', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'getStorageAt', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'gnoPrice', values?: undefined): string
  encodeFunctionData(functionFragment: 'gnoToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'instantlySwappableBalance', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'investorFundsTarget', values?: undefined): string
  encodeFunctionData(functionFragment: 'isCancelable', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'isClaimed', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nativeTokenPrice', values?: undefined): string
  encodeFunctionData(functionFragment: 'newlyVestedBalance', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'simulateDelegatecall', values: [AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'simulateDelegatecallInternal', values: [AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'stopClaim', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'swap', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'swapAll', values?: undefined): string
  encodeFunctionData(functionFragment: 'swappableBalanceOf', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'teamController', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'usdcPrice', values?: undefined): string
  encodeFunctionData(functionFragment: 'usdcToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'vestedAllocation', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'vestingStart', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawEth', values?: undefined): string
  encodeFunctionData(functionFragment: 'wrappedNativeToken', values?: undefined): string

  decodeFunctionResult(functionFragment: 'VESTING_PERIOD_IN_SECONDS', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimMany', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'communityFundsTarget', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cowToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'cumulativeVestedBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deploymentTimestamp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fullAllocation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStorageAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gnoPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gnoToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'instantlySwappableBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'investorFundsTarget', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isCancelable', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isClaimed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nativeTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'newlyVestedBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'simulateDelegatecall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'simulateDelegatecallInternal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopClaim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swappableBalanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'teamController', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'usdcPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'usdcToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vestedAllocation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vestingStart', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawEth', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'wrappedNativeToken', data: BytesLike): Result
}

export namespace ApprovalEvent {
  export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish]
  export type OutputTuple = [owner: string, spender: string, value: bigint]
  export interface OutputObject {
    owner: string
    spender: string
    value: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ClaimedEvent {
  export type InputTuple = [
    index: BigNumberish,
    claimType: BigNumberish,
    claimant: AddressLike,
    claimableAmount: BigNumberish,
    claimedAmount: BigNumberish,
  ]
  export type OutputTuple = [
    index: bigint,
    claimType: bigint,
    claimant: string,
    claimableAmount: bigint,
    claimedAmount: bigint,
  ]
  export interface OutputObject {
    index: bigint
    claimType: bigint
    claimant: string
    claimableAmount: bigint
    claimedAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish]
  export type OutputTuple = [from: string, to: string, value: bigint]
  export interface OutputObject {
    from: string
    to: string
    value: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VestedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, amount: bigint]
  export interface OutputObject {
    user: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VestingAddedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish, isCancelable: boolean]
  export type OutputTuple = [user: string, amount: bigint, isCancelable: boolean]
  export interface OutputObject {
    user: string
    amount: bigint
    isCancelable: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VestingStoppedEvent {
  export type InputTuple = [user: AddressLike, freedVestingBeneficiary: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, freedVestingBeneficiary: string, amount: bigint]
  export interface OutputObject {
    user: string
    freedVestingBeneficiary: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface VCow extends BaseContract {
  connect(runner?: ContractRunner | null): VCow
  attach(target: string | Addressable): VCow
  waitForDeployment(): Promise<this>

  interface: VCowInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  VESTING_PERIOD_IN_SECONDS: TypedContractMethod<[], [bigint], 'view'>

  allowance: TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [bigint], 'view'>

  approve: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>

  balanceOf: TypedContractMethod<[user: AddressLike], [bigint], 'view'>

  claim: TypedContractMethod<
    [
      index: BigNumberish,
      claimType: BigNumberish,
      claimant: AddressLike,
      claimableAmount: BigNumberish,
      claimedAmount: BigNumberish,
      merkleProof: BytesLike[],
    ],
    [void],
    'payable'
  >

  claimMany: TypedContractMethod<
    [
      indices: BigNumberish[],
      claimTypes: BigNumberish[],
      claimants: AddressLike[],
      claimableAmounts: BigNumberish[],
      claimedAmounts: BigNumberish[],
      merkleProofs: BytesLike[][],
      sentNativeTokens: BigNumberish[],
    ],
    [void],
    'payable'
  >

  communityFundsTarget: TypedContractMethod<[], [string], 'view'>

  cowToken: TypedContractMethod<[], [string], 'view'>

  cumulativeVestedBalance: TypedContractMethod<[user: AddressLike], [bigint], 'view'>

  decimals: TypedContractMethod<[], [bigint], 'view'>

  deploymentTimestamp: TypedContractMethod<[], [bigint], 'view'>

  fullAllocation: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>

  getStorageAt: TypedContractMethod<[offset: BigNumberish, length: BigNumberish], [string], 'view'>

  gnoPrice: TypedContractMethod<[], [bigint], 'view'>

  gnoToken: TypedContractMethod<[], [string], 'view'>

  instantlySwappableBalance: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>

  investorFundsTarget: TypedContractMethod<[], [string], 'view'>

  isCancelable: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>

  isClaimed: TypedContractMethod<[index: BigNumberish], [boolean], 'view'>

  merkleRoot: TypedContractMethod<[], [string], 'view'>

  name: TypedContractMethod<[], [string], 'view'>

  nativeTokenPrice: TypedContractMethod<[], [bigint], 'view'>

  newlyVestedBalance: TypedContractMethod<[user: AddressLike], [bigint], 'view'>

  simulateDelegatecall: TypedContractMethod<
    [targetContract: AddressLike, calldataPayload: BytesLike],
    [string],
    'nonpayable'
  >

  simulateDelegatecallInternal: TypedContractMethod<
    [targetContract: AddressLike, calldataPayload: BytesLike],
    [string],
    'nonpayable'
  >

  stopClaim: TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>

  swap: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>

  swapAll: TypedContractMethod<[], [bigint], 'nonpayable'>

  swappableBalanceOf: TypedContractMethod<[user: AddressLike], [bigint], 'view'>

  symbol: TypedContractMethod<[], [string], 'view'>

  teamController: TypedContractMethod<[], [string], 'view'>

  totalSupply: TypedContractMethod<[], [bigint], 'view'>

  transfer: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>

  transferFrom: TypedContractMethod<[arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish], [boolean], 'view'>

  usdcPrice: TypedContractMethod<[], [bigint], 'view'>

  usdcToken: TypedContractMethod<[], [string], 'view'>

  vestedAllocation: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>

  vestingStart: TypedContractMethod<[], [bigint], 'view'>

  withdrawEth: TypedContractMethod<[], [void], 'nonpayable'>

  wrappedNativeToken: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(nameOrSignature: 'VESTING_PERIOD_IN_SECONDS'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'allowance',
  ): TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>
  getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<[user: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'claim',
  ): TypedContractMethod<
    [
      index: BigNumberish,
      claimType: BigNumberish,
      claimant: AddressLike,
      claimableAmount: BigNumberish,
      claimedAmount: BigNumberish,
      merkleProof: BytesLike[],
    ],
    [void],
    'payable'
  >
  getFunction(
    nameOrSignature: 'claimMany',
  ): TypedContractMethod<
    [
      indices: BigNumberish[],
      claimTypes: BigNumberish[],
      claimants: AddressLike[],
      claimableAmounts: BigNumberish[],
      claimedAmounts: BigNumberish[],
      merkleProofs: BytesLike[][],
      sentNativeTokens: BigNumberish[],
    ],
    [void],
    'payable'
  >
  getFunction(nameOrSignature: 'communityFundsTarget'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'cowToken'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'cumulativeVestedBalance'): TypedContractMethod<[user: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'decimals'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'deploymentTimestamp'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'fullAllocation'): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getStorageAt',
  ): TypedContractMethod<[offset: BigNumberish, length: BigNumberish], [string], 'view'>
  getFunction(nameOrSignature: 'gnoPrice'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'gnoToken'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'instantlySwappableBalance'): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'investorFundsTarget'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'isCancelable'): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>
  getFunction(nameOrSignature: 'isClaimed'): TypedContractMethod<[index: BigNumberish], [boolean], 'view'>
  getFunction(nameOrSignature: 'merkleRoot'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'name'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'nativeTokenPrice'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'newlyVestedBalance'): TypedContractMethod<[user: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'simulateDelegatecall',
  ): TypedContractMethod<[targetContract: AddressLike, calldataPayload: BytesLike], [string], 'nonpayable'>
  getFunction(
    nameOrSignature: 'simulateDelegatecallInternal',
  ): TypedContractMethod<[targetContract: AddressLike, calldataPayload: BytesLike], [string], 'nonpayable'>
  getFunction(nameOrSignature: 'stopClaim'): TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'swap'): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'swapAll'): TypedContractMethod<[], [bigint], 'nonpayable'>
  getFunction(nameOrSignature: 'swappableBalanceOf'): TypedContractMethod<[user: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'symbol'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'teamController'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transfer',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<[arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish], [boolean], 'view'>
  getFunction(nameOrSignature: 'usdcPrice'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'usdcToken'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'vestedAllocation'): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'vestingStart'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'withdrawEth'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'wrappedNativeToken'): TypedContractMethod<[], [string], 'view'>

  getEvent(
    key: 'Approval',
  ): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>
  getEvent(
    key: 'Claimed',
  ): TypedContractEvent<ClaimedEvent.InputTuple, ClaimedEvent.OutputTuple, ClaimedEvent.OutputObject>
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>
  getEvent(key: 'Vested'): TypedContractEvent<VestedEvent.InputTuple, VestedEvent.OutputTuple, VestedEvent.OutputObject>
  getEvent(
    key: 'VestingAdded',
  ): TypedContractEvent<VestingAddedEvent.InputTuple, VestingAddedEvent.OutputTuple, VestingAddedEvent.OutputObject>
  getEvent(
    key: 'VestingStopped',
  ): TypedContractEvent<
    VestingStoppedEvent.InputTuple,
    VestingStoppedEvent.OutputTuple,
    VestingStoppedEvent.OutputObject
  >

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >
    Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>

    'Claimed(uint256,uint8,address,uint256,uint256)': TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >
    Claimed: TypedContractEvent<ClaimedEvent.InputTuple, ClaimedEvent.OutputTuple, ClaimedEvent.OutputObject>

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >
    Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>

    'Vested(address,uint256)': TypedContractEvent<
      VestedEvent.InputTuple,
      VestedEvent.OutputTuple,
      VestedEvent.OutputObject
    >
    Vested: TypedContractEvent<VestedEvent.InputTuple, VestedEvent.OutputTuple, VestedEvent.OutputObject>

    'VestingAdded(address,uint256,bool)': TypedContractEvent<
      VestingAddedEvent.InputTuple,
      VestingAddedEvent.OutputTuple,
      VestingAddedEvent.OutputObject
    >
    VestingAdded: TypedContractEvent<
      VestingAddedEvent.InputTuple,
      VestingAddedEvent.OutputTuple,
      VestingAddedEvent.OutputObject
    >

    'VestingStopped(address,address,uint256)': TypedContractEvent<
      VestingStoppedEvent.InputTuple,
      VestingStoppedEvent.OutputTuple,
      VestingStoppedEvent.OutputObject
    >
    VestingStopped: TypedContractEvent<
      VestingStoppedEvent.InputTuple,
      VestingStoppedEvent.OutputTuple,
      VestingStoppedEvent.OutputObject
    >
  }
}

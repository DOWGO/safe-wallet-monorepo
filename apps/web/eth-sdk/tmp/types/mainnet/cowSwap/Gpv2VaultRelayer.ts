/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common'

export declare namespace IVault {
  export type BatchSwapStepStruct = {
    poolId: BytesLike
    assetInIndex: BigNumberish
    assetOutIndex: BigNumberish
    amount: BigNumberish
    userData: BytesLike
  }

  export type BatchSwapStepStructOutput = [
    poolId: string,
    assetInIndex: bigint,
    assetOutIndex: bigint,
    amount: bigint,
    userData: string,
  ] & {
    poolId: string
    assetInIndex: bigint
    assetOutIndex: bigint
    amount: bigint
    userData: string
  }

  export type FundManagementStruct = {
    sender: AddressLike
    fromInternalBalance: boolean
    recipient: AddressLike
    toInternalBalance: boolean
  }

  export type FundManagementStructOutput = [
    sender: string,
    fromInternalBalance: boolean,
    recipient: string,
    toInternalBalance: boolean,
  ] & {
    sender: string
    fromInternalBalance: boolean
    recipient: string
    toInternalBalance: boolean
  }
}

export declare namespace GPv2Transfer {
  export type DataStruct = {
    account: AddressLike
    token: AddressLike
    amount: BigNumberish
    balance: BytesLike
  }

  export type DataStructOutput = [account: string, token: string, amount: bigint, balance: string] & {
    account: string
    token: string
    amount: bigint
    balance: string
  }
}

export interface Gpv2VaultRelayerInterface extends Interface {
  getFunction(nameOrSignature: 'batchSwapWithFee' | 'transferFromAccounts'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'batchSwapWithFee',
    values: [
      BigNumberish,
      IVault.BatchSwapStepStruct[],
      AddressLike[],
      IVault.FundManagementStruct,
      BigNumberish[],
      BigNumberish,
      GPv2Transfer.DataStruct,
    ],
  ): string
  encodeFunctionData(functionFragment: 'transferFromAccounts', values: [GPv2Transfer.DataStruct[]]): string

  decodeFunctionResult(functionFragment: 'batchSwapWithFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFromAccounts', data: BytesLike): Result
}

export interface Gpv2VaultRelayer extends BaseContract {
  connect(runner?: ContractRunner | null): Gpv2VaultRelayer
  attach(target: string | Addressable): Gpv2VaultRelayer
  waitForDeployment(): Promise<this>

  interface: Gpv2VaultRelayerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  batchSwapWithFee: TypedContractMethod<
    [
      kind: BigNumberish,
      swaps: IVault.BatchSwapStepStruct[],
      tokens: AddressLike[],
      funds: IVault.FundManagementStruct,
      limits: BigNumberish[],
      deadline: BigNumberish,
      feeTransfer: GPv2Transfer.DataStruct,
    ],
    [bigint[]],
    'nonpayable'
  >

  transferFromAccounts: TypedContractMethod<[transfers: GPv2Transfer.DataStruct[]], [void], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(
    nameOrSignature: 'batchSwapWithFee',
  ): TypedContractMethod<
    [
      kind: BigNumberish,
      swaps: IVault.BatchSwapStepStruct[],
      tokens: AddressLike[],
      funds: IVault.FundManagementStruct,
      limits: BigNumberish[],
      deadline: BigNumberish,
      feeTransfer: GPv2Transfer.DataStruct,
    ],
    [bigint[]],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transferFromAccounts',
  ): TypedContractMethod<[transfers: GPv2Transfer.DataStruct[]], [void], 'nonpayable'>

  filters: {}
}

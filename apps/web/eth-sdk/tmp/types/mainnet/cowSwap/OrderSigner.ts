/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  Addressable,
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common'

export declare namespace GPv2Order {
  export type DataStruct = {
    sellToken: AddressLike
    buyToken: AddressLike
    receiver: AddressLike
    sellAmount: BigNumberish
    buyAmount: BigNumberish
    validTo: BigNumberish
    appData: BytesLike
    feeAmount: BigNumberish
    kind: BytesLike
    partiallyFillable: boolean
    sellTokenBalance: BytesLike
    buyTokenBalance: BytesLike
  }

  export type DataStructOutput = [
    sellToken: string,
    buyToken: string,
    receiver: string,
    sellAmount: bigint,
    buyAmount: bigint,
    validTo: bigint,
    appData: string,
    feeAmount: bigint,
    kind: string,
    partiallyFillable: boolean,
    sellTokenBalance: string,
    buyTokenBalance: string,
  ] & {
    sellToken: string
    buyToken: string
    receiver: string
    sellAmount: bigint
    buyAmount: bigint
    validTo: bigint
    appData: string
    feeAmount: bigint
    kind: string
    partiallyFillable: boolean
    sellTokenBalance: string
    buyTokenBalance: string
  }
}

export interface OrderSignerInterface extends Interface {
  getFunction(
    nameOrSignature: 'deployedAt' | 'domainSeparator' | 'signOrder' | 'signing' | 'unsignOrder',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'deployedAt', values?: undefined): string
  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string
  encodeFunctionData(functionFragment: 'signOrder', values: [GPv2Order.DataStruct, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'signing', values?: undefined): string
  encodeFunctionData(functionFragment: 'unsignOrder', values: [GPv2Order.DataStruct]): string

  decodeFunctionResult(functionFragment: 'deployedAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signOrder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signing', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unsignOrder', data: BytesLike): Result
}

export interface OrderSigner extends BaseContract {
  connect(runner?: ContractRunner | null): OrderSigner
  attach(target: string | Addressable): OrderSigner
  waitForDeployment(): Promise<this>

  interface: OrderSignerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  deployedAt: TypedContractMethod<[], [string], 'view'>

  domainSeparator: TypedContractMethod<[], [string], 'view'>

  signOrder: TypedContractMethod<
    [order: GPv2Order.DataStruct, validDuration: BigNumberish, feeAmountBP: BigNumberish],
    [void],
    'nonpayable'
  >

  signing: TypedContractMethod<[], [string], 'view'>

  unsignOrder: TypedContractMethod<[order: GPv2Order.DataStruct], [void], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(nameOrSignature: 'deployedAt'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'domainSeparator'): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'signOrder',
  ): TypedContractMethod<
    [order: GPv2Order.DataStruct, validDuration: BigNumberish, feeAmountBP: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'signing'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'unsignOrder'): TypedContractMethod<[order: GPv2Order.DataStruct], [void], 'nonpayable'>

  filters: {}
}

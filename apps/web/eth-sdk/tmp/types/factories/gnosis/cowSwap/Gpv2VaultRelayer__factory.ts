/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers'
import type { Gpv2VaultRelayer, Gpv2VaultRelayerInterface } from '../../../gnosis/cowSwap/Gpv2VaultRelayer'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IVault',
        name: 'vault_',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'enum IVault.SwapKind',
        name: 'kind',
        type: 'uint8',
      },
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'poolId',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'assetInIndex',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'assetOutIndex',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'userData',
            type: 'bytes',
          },
        ],
        internalType: 'struct IVault.BatchSwapStep[]',
        name: 'swaps',
        type: 'tuple[]',
      },
      {
        internalType: 'contract IERC20[]',
        name: 'tokens',
        type: 'address[]',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'sender',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'fromInternalBalance',
            type: 'bool',
          },
          {
            internalType: 'address payable',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'toInternalBalance',
            type: 'bool',
          },
        ],
        internalType: 'struct IVault.FundManagement',
        name: 'funds',
        type: 'tuple',
      },
      {
        internalType: 'int256[]',
        name: 'limits',
        type: 'int256[]',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'account',
            type: 'address',
          },
          {
            internalType: 'contract IERC20',
            name: 'token',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'bytes32',
            name: 'balance',
            type: 'bytes32',
          },
        ],
        internalType: 'struct GPv2Transfer.Data',
        name: 'feeTransfer',
        type: 'tuple',
      },
    ],
    name: 'batchSwapWithFee',
    outputs: [
      {
        internalType: 'int256[]',
        name: 'tokenDeltas',
        type: 'int256[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'account',
            type: 'address',
          },
          {
            internalType: 'contract IERC20',
            name: 'token',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'bytes32',
            name: 'balance',
            type: 'bytes32',
          },
        ],
        internalType: 'struct GPv2Transfer.Data[]',
        name: 'transfers',
        type: 'tuple[]',
      },
    ],
    name: 'transferFromAccounts',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const

export class Gpv2VaultRelayer__factory {
  static readonly abi = _abi
  static createInterface(): Gpv2VaultRelayerInterface {
    return new Interface(_abi) as Gpv2VaultRelayerInterface
  }
  static connect(address: string, runner?: ContractRunner | null): Gpv2VaultRelayer {
    return new Contract(address, _abi, runner) as unknown as Gpv2VaultRelayer
  }
}
